
constexpr __u64 X86_R_RAX	= 0x88300;
constexpr __u64 X86_R_RBX	= 0x88303;
constexpr __u64 X86_R_RCX	= 0x88301;
constexpr __u64 X86_R_RDX	= 0x88302;
constexpr __u64 X86_R_RSI	= 0x88306;
constexpr __u64 X86_R_RDI	= 0x88307;
constexpr __u64 X86_R_RBP	= 0x88305;
constexpr __u64 X86_R_RSP	= 0x88304;
constexpr __u64 X86_R_R8	= 0x88008;
constexpr __u64 X86_R_R9	= 0x88009;
constexpr __u64 X86_R_R10	= 0x8800a;
constexpr __u64 X86_R_R11	= 0x8800b;
constexpr __u64 X86_R_R12	= 0x8800c;
constexpr __u64 X86_R_R13	= 0x8800d;
constexpr __u64 X86_R_R14	= 0x8800e;
constexpr __u64 X86_R_R15	= 0x8800f;


typedef struct {
	__u64	rax;
	__u64	rbx;
	__u64	rcx;
	__u64	rdx;
	__u64	rsi;
	__u64	rdi;
	__u64	rbp;
	__u64	rsp;
	__u64	r8;
	__u64	r9;
	__u64	r10;
	__u64	r11;
	__u64	r12;
	__u64	r13;
	__u64	r14;
	__u64	r15;
} regs_t;


if (in[1]->IsRIP()) v += (in.size() + sym->st_value + i);
								
switch (in[0]->Reg().val()) {
	case X86_R_RAX:		r.rax = v;
	case X86_R_RBX:		r.rbx = v;
	case X86_R_RCX:		r.rcx = v;
	case X86_R_RDX:		r.rdx = v;
	case X86_R_RSI:		r.rsi = v;
	case X86_R_RDI:		r.rdi = v;
	case X86_R_RBP:		r.rbp = v;
	case X86_R_RSP:		r.rsp = v;
	case X86_R_R8:		r.r8 = v;
	case X86_R_R9:		r.r9 = v;
	case X86_R_R10:		r.r10 = v;
	case X86_R_R11:		r.r11 = v;
	case X86_R_R12:		r.r12 = v;
	case X86_R_R13:		r.r13 = v;
	case X86_R_R14:		r.r14 = v;
	case X86_R_R15:		r.r15 = v;
}
in.Print();



// if (_contain_(sym->st_value, sym->st_size, elf.ehdr->e_entry)) {
					// 	void *ptr = elf.off<void*>(elf.vtof(sym->st_value));

					// 	regs_t r = {0};
					// 	d.iter(ptr, sym->st_size, [&r, &sym](__u64 i, insn_t& in) {
					// 		if (in.IsDatamov()) {
					// 			__u64 v = in[1]->Value();

					// 		}
					// 		if (in.IsCall()) {
					// 			printf("%lx\n", in[0]->Value() + in.size() + sym->st_value + i);
					// 			printf("%lx %lx %lx %lx\n", r.rdi, r.rsi, r.rdx, r.r10);
					// 		}
					// 	});
					// }




void find(Elf& elf, std::list<BasicBlock>& bb) {


				// BBlock::unknown_sym_size();
		for (auto& stab : elf.symtab) {
			if (stab.t & SHT_SYMTAB)
				foreach_sym(&stab, sym) if (!!sym->st_value){
					__u64 sym_off = elf.vtof(sym->st_value);

					for (__u64& next : next_vec) {
						if (next > sym_off) {
							printf("%s - %lx #%lx\n", &stab.str[sym->st_name], sym_off, next - sym_off);
							break;
						}
					}
				}
		}
			// 		if (elf.VirtPerm(sym->st_value) & PF_X) {
			// 			if (!sym->st_size) f
			// 		}
			// 	}
			// }
	}